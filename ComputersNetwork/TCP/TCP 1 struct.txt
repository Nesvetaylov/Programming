 // CLIENT TCP
#include <iostream>  
#define _WINSOCK_DEPRECATED_NO_WARNINGS  
// подавление предупреждений библиотеки winsock2
#include <winsock2.h> //заголовочный файл для работы с сокетами
#include <string>
#include <windows.h>//заголовочный файл для работы с функциями Windows API
#pragma comment (lib, "Ws2_32.lib")/*Директива компилятору для автоматической связи 
с библиотекой Ws2_32.lib, которая содержит функции для работы с сокетами.*/
#pragma warning(disable: 4996)  // подавление предупреждения 4996 
using namespace std;
#define SRV_HOST "192.168.26.193"  //адрес сервера
#define SRV_PORT 1234 //порт сервера
#define CLNT_PORT 1235  //порт клиента
#define BUF_SIZE 64  //размер буфера для хранения данных
char TXT_ANSW[] = "I am your student\n"; //Контактное сообщение для сервера
int main() {
	char buff[1024]; //буфер для хранения данных от библиотеки
	if (WSAStartup(0x0202, (WSADATA*)&buff[0])) {
	//Функция WSAStartup инициализирует использование библиотеки Winsock (версия Winsock, 
	//структура WSADATA будет заполнена информацией о версии Winsock и других дополнительных данных.)
	//если всё хорошо, выведет нулевое значение
		cout << "Error WSAStartup \n" << WSAGetLastError();   // Номер ошибки: функция, которая возвращает код последней ошибки Winsock.
		return -1;
	}

	SOCKET s; // сокет клиента
	int from_len;   //размер полученных от сервера данных = переменная для хранения размера сруктуры sockaddr_in
	char buf[BUF_SIZE] = { 0 };    // буфер для хранения полученного сообщения
	sockaddr_in clnt_sin, srv_sin; //объект для создания места нахождения сервера и клиента
	s = socket(AF_INET, SOCK_STREAM, 0); //cоздание сокета с помощью функции socket с параметрами AF_INET (семейство протоколов IPv4) и SOCK_STREAM (потоковая передача данных).

	//правила работы сокета
	clnt_sin.sin_family = AF_INET; //Установка семейства адресов для sin на AF_INET.
	clnt_sin.sin_addr.s_addr = 0; //Установка IP-адреса для sin на 0, что означает, сюда будет записан адрес текущего компа
	clnt_sin.sin_port = htons(CLNT_PORT);//Установка порта для sin на значение SRV_PORT с помощью функции htons для преобразования порта в сетевой порядок байтов.
	bind(s, (sockaddr*)&clnt_sin, sizeof(clnt_sin));  //Привязка сокета клиента к адресу и порту

	// заполнение структуры о сервере
	hostent* hp = gethostbyname(SRV_HOST); // формат адреса для подключения к серверу=по символьному имени получает числовой формат адреса
	srv_sin.sin_port = htons(SRV_PORT); //в сервер син помещается порт
	srv_sin.sin_family = AF_INET;
	((unsigned long*)&srv_sin.sin_addr)[0] = ((unsigned long**)hp->h_addr_list)[0][0]; //записываем адрес сервера в список серверов

	connect(s, (sockaddr*)&srv_sin, sizeof(srv_sin)); //клент связывается с сервером, прокладывается вирт канал
	string mst;
	do {
		from_len = recv(s, (char*)&buf, BUF_SIZE, 0); // в буфер клиента с сервера приходят байты 
		buf[from_len] = 0; // конец отмечается нулём
		cout << buf << endl;
		getline(cin, mst); // в строку mst к клавиатуры считывается ответ клиента
		int msg_size = mst.size(); //узнаём размер сообщения клиента
		send(s, (char*)&mst[0], msg_size, 0); //отправляем серверу сообщение
	} while (mst != "Bye"); //пока не встретим БАЙ
	cout << "exit to infinity" << endl; //ухожу в бесконечность
	cin.get();    //задержка
	closesocket(s); //разрыв соединения
	return 0;
}























// SERVER TCP 
#include <iostream>  
#include <winsock2.h> 
#include <windows.h> 
#include <string> 
#pragma comment (lib, "Ws2_32.lib")  
using namespace std;
#define SRV_PORT 1234  
#define BUF_SIZE 64  
const string QUEST = "Who are you?\n";
int main() {
	char buff[1024];
	if (WSAStartup(0x0202, (WSADATA*)&buff[0]))
	{
		cout << "Error WSAStartup \n" << WSAGetLastError();   // Ошибка!
		return -1;
	}
	SOCKET s, s_new;
	int from_len;
	char buf[BUF_SIZE] = { 0 };
	sockaddr_in sin, from_sin;
	s = socket(AF_INET, SOCK_STREAM, 0);
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = 0;
	sin.sin_port = htons(SRV_PORT);
	bind(s, (sockaddr*)&sin, sizeof(sin));
	string msg, msg1;
	listen(s, 3);
	while (1) {
		from_len = sizeof(from_sin);
		s_new = accept(s, (sockaddr*)&from_sin, &from_len);
		cout << "new connected client! " << endl;
		msg = QUEST;
		while (1) {
			send(s_new, (char*)&msg[0], msg.size(), 0);
			from_len = recv(s_new, (char*)buf, BUF_SIZE, 0);
			buf[from_len] = 0;
			msg1 = (string)buf;
			cout << msg1 << endl;;
			if (msg1 == "Bye") break;
			getline(cin, msg);
		}
		cout << "client is lost";
		closesocket(s_new);
	}
	return 0;
}


